{
  "code" : "io.liquichain.api.payment.WorkflowMetric",
  "description" : "prometheus metric for order workflow",
  "inputs" : [ ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.payment;\r\n\r\nimport org.meveo.service.script.Script;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.customEntities.MoOrder;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class WorkflowMetric extends Script {\r\n    \r\n    \r\n    private static final Logger log = LoggerFactory.getLogger(WorkflowMetric.class);\r\n    \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private String result;\r\n\r\n\r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n    private static String serializeOrderKey(MoOrder order){\r\n        return String.format(\"status=\\\"%s\\\",user_group=\\\"%s\\\",user=\\\"%s\\\"}\",order.getStatus(),order.getGroup(),order.getAssignedTo());\r\n    }\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n        result = \"# HELP workflow_status_total The total number of workflow instances.\\n\"\r\n        +\"# TYPE workflow_status_total counter\\n\";\r\n        //FIXME: do not agregate in memory, use a SQL query dummy, that is the entire point of storing the entities in SQL\r\n        List<MoOrder> orders = new ArrayList<>();\r\n        try{\r\n            orders = crossStorageApi.find(defaultRepo, MoOrder.class).getResults();\r\n        } catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        long time = System.currentTimeMillis();\r\n        String lines =\"\";\r\n        Map<String,Map<String,Map<String,Long>>> aggregates = new HashMap<>();\r\n        orders.stream()\r\n            .collect(Collectors.groupingBy(order -> serializeOrderKey(order), Collectors.counting()))\r\n            .forEach((id,count)->{result+=\"workflow_status_total{process=\\\"order\\\",\"+id+\" \"+count+\" \"+time+\"\\n\";});\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}