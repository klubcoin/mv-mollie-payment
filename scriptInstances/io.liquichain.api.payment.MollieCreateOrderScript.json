{
  "code" : "io.liquichain.api.payment.MollieCreateOrderScript",
  "inputs" : [ {
    "name" : "orderId",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  }, {
    "name" : "order",
    "type" : "MoOrder"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.payment;\r\n\r\n\r\nimport java.time.Duration;\r\nimport java.time.temporal.TemporalAmount;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\n\r\nimport org.apache.commons.collections.CollectionUtils;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.meveo.admin.util.pagination.PaginationConfiguration;\r\nimport org.meveo.commons.utils.StringUtils;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\nimport org.meveo.model.customEntities.CustomEntityTemplate;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.service.custom.CustomEntityTemplateService;\r\nimport org.meveo.service.custom.NativeCustomEntityInstanceService;\r\nimport org.meveo.api.rest.technicalservice.EndpointScript;\r\nimport org.meveo.model.customEntities.MoOrder;\r\nimport org.meveo.model.customEntities.MoOrderLine;\r\nimport org.meveo.model.customEntities.MoAddress;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.databind.ser.std.MapSerializer;\r\n\r\npublic class MollieCreateOrderScript extends Script {\r\n\t\r\n    private static final Logger log = LoggerFactory.getLogger(MollieCreateOrderScript.class);\r\n    \r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n    private CustomEntityTemplateService customEntityTemplateService = getCDIBean(CustomEntityTemplateService.class);\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n\r\n    final ObjectMapper mapper = new ObjectMapper();\r\n  \r\n    private String result;\r\n  \r\n    private String orderId;\r\n    private MoOrder order;\r\n\r\n    public void setOrderId(String orderId){\r\n      this.orderId = orderId;\r\n    }\r\n\r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n    public MoOrder getOrder() {\r\n        return order;\r\n    }\r\n\r\n    private Long getLongParam(Map<String, Object> parameters,String name){\r\n        if(parameters==null){\r\n            return null;\r\n        }\r\n        Long result = null;\r\n        if(parameters.containsKey(name)){\r\n            Object objResult = parameters.get(name);\r\n            if(objResult!=null){\r\n                try{\r\n                    result = Long.parseLong(objResult.toString());\r\n                } catch(Exception e){\r\n                    log.error(\"error while parsing \"+name,e);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private Double getDoubleParam(Map<String, Object> parameters,String name){\r\n        if(parameters==null){\r\n            return null;\r\n        }\r\n        Double result = null;\r\n        if(parameters.containsKey(name)){\r\n            Object objResult = parameters.get(name);\r\n            if(objResult!=null){\r\n                try{\r\n                    result = Double.parseDouble(objResult.toString());\r\n                } catch(Exception e){\r\n                    log.error(\"error while parsing \"+name,e);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private String getStrParam(Map<String, Object> parameters,String name){\r\n        if(parameters==null){\r\n            return null;\r\n        }\r\n        String result = null;\r\n        if(parameters.containsKey(name)){\r\n            Object objResult = parameters.get(name);\r\n            if(objResult!=null){\r\n                result = objResult.toString();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private MoAddress parseAddress(Map<String, Object> parameters){\r\n        if(parameters==null){\r\n            return null;\r\n        }\r\n        MoAddress result =  new MoAddress();\r\n        String city = getStrParam(parameters,\"city\");\r\n        result.setCity(city);\r\n        String country = getStrParam(parameters,\"country\");\r\n        result.setCountry(country);\r\n        String postalCode = getStrParam(parameters,\"postalCode\");\r\n        result.setPostalCode(postalCode);\r\n        String region = getStrParam(parameters,\"region\");\r\n        result.setRegion(region);\r\n        String streetAdditional = getStrParam(parameters,\"streetAdditional\");\r\n        result.setStreetAdditional(streetAdditional);\r\n        String streetAndNumber = getStrParam(parameters,\"streetAndNumber\");\r\n        result.setStreetAndNumber(streetAndNumber);\r\n        String uuid = DigestUtils.sha1Hex((streetAndNumber+streetAdditional+city+postalCode+region+country).replaceAll(\"[^\\\\p{IsAlphabetic}\\\\p{IsDigit}]\", \"\"));\r\n        result.setUuid(uuid);\r\n      \ttry{\r\n            crossStorageApi.createOrUpdate(defaultRepo, result);    \r\n        } catch (Exception e){\r\n          log.error(\"error persisting address:{} [{}]\",result,e.getMessage());\r\n          result=null;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private MoOrderLine parseOrderLine(Map<String, Object> parameters){\r\n        if(parameters==null){\r\n            return null;\r\n        };\r\n        MoOrderLine result = new MoOrderLine();\r\n        result.setCategory(getStrParam(parameters,\"category\"));\r\n        result.setCurrency(getStrParam(parameters,\"currency\"));\r\n        result.setDiscountAmount(getDoubleParam((Map<String, Object>)parameters.get(\"value\"),\"discountAmount\"));\r\n        result.setImageUrl(getStrParam(parameters,\"imageUrl\"));\r\n        result.setName(getStrParam(parameters,\"name\"));\r\n        result.setProductUrl(getStrParam(parameters,\"productUrl\"));\r\n        result.setQuantity(getLongParam(parameters,\"quantity\"));\r\n        result.setSku(getStrParam(parameters,\"sku\"));\r\n        result.setTotalAmount(getDoubleParam((Map<String, Object>)parameters.get(\"value\"),\"totalAmount\"));\r\n        result.setType(getStrParam(parameters,\"type\"));\r\n        result.setUnitPrice(getDoubleParam((Map<String, Object>)parameters.get(\"value\"),\"unitPrice\"));\r\n        /*try{\r\n            crossStorageApi.createOrUpdate(defaultRepo, result);    \r\n        } catch (Exception e){\r\n          log.error(\"error persisting  orderline:{} [{}]\",result,e.getMessage());\r\n          result=null;\r\n        }*/\r\n        return result;\r\n    }\r\n\r\n    private List<MoOrderLine> parseOrderLines(List<Map<String, Object>> parameters){\r\n        if(parameters==null || parameters.size()==0){\r\n            return null;\r\n        };\r\n        List<MoOrderLine>  result = new ArrayList<MoOrderLine>();\r\n        for(Map<String, Object> lineParam :parameters){\r\n            MoOrderLine line = parseOrderLine(lineParam);\r\n            if(line!=null){\r\n                result.add(line);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n        if(orderId!=null){\r\n        \tlog.info(\"get Order[{}] {}\",orderId,parameters);\r\n            try{\r\n                if(orderId.startsWith(\"ord_\")){\r\n                  orderId=orderId.substring(4);\r\n                }\r\n        \t\torder = crossStorageApi.find(defaultRepo, orderId,MoOrder.class);\r\n      \t\t} catch(Exception e){\r\n        \t\tlog.error(\"cannot get order \"+orderId,e);\r\n      \t\t}\r\n            return;\r\n        }\r\n        log.info(\"CreateOrder {}\",parameters);\r\n        Map<String, Object> amountMap = (Map<String, Object>) parameters.get(\"amount\");\r\n        MoOrder order = new MoOrder();\r\n        order.setAmount(Double.parseDouble(getStrParam(amountMap,\"value\")));\r\n        order.setCurrency(getStrParam(amountMap,\"currency\"));\r\n      \ttry {\r\n        \torder.setMetadata(mapper.writeValueAsString(parameters.get(\"metadata\")));\r\n      \t} catch(Exception e){\r\n          order.setMetadata(getStrParam(parameters,\"metadata\"));\r\n        }\r\n        order.setOrderNumber(getStrParam(parameters,\"orderNumber\"));\r\n        order.setRedirectUrl(getStrParam(parameters,\"redirectUrl\"));\r\n        if(!\"licoin\".equals(getStrParam(parameters,\"method\"))){\r\n            result= \"{\\\"error\\\":\\\"invalid payment method\\\"\";\r\n        }\r\n        order.setLocale(getStrParam(parameters,\"locale\"));\r\n        order.setRedirectUrl(getStrParam(parameters,\"redirectUrl\").replace(\"http:\",\"https:\"));\r\n        order.setWebhookUrl(getStrParam(parameters,\"webhookUrl\").replace(\"http:\",\"https:\"));\r\n        order.setBillingAddress(parseAddress((Map<String, Object>) parameters.get(\"billingAddress\")));\r\n        order.setShippingAddress(parseAddress((Map<String, Object>) parameters.get(\"shippingAddress\")));\r\n        order.setLines(parseOrderLines((List<Map<String, Object>>) parameters.get(\"lines\")));\r\n        order.setStatus(\"created\");\r\n        parameters.put(\"status\",\"created\");\r\n        order.setCreationDate(java.time.Instant.now());\r\n        parameters.put(\"createdAt\",order.getCreationDate().toString());\r\n        order.setExpiresAt(order.getCreationDate().plus(Duration.ofDays(10)));\r\n        parameters.put(\"expiresAt\",order.getExpiresAt().toString());\r\n        try{\r\n            String orderId = crossStorageApi.createOrUpdate(defaultRepo, order);\r\n            \r\n            parameters.put(\"id\",\"ord_\"+orderId);\r\n            Map<String, Object> links = new HashMap<>();\r\n            Map<String, String> self = new HashMap<>();\r\n            self.put(\"href\",\"https://account.liquichain.io/meveo/rest/v1/orders/\"+orderId);\r\n            self.put(\"type\",\"application/hal+json\");\r\n            links.put(\"self\",self);\r\n            Map<String, String> checkout = new HashMap<>();\r\n            checkout.put(\"href\",\"https://account.liquichain.io/meveo/rest/paymentpages/checkout/\"+orderId);\r\n            checkout.put(\"type\",\"text/html\");\r\n            links.put(\"checkout\",checkout);\r\n            Map<String, String> dashboard = new HashMap<>();\r\n            dashboard.put(\"href\",\"https://account.liquichain.io/dashboard?orderid=\"+orderId);\r\n            dashboard.put(\"type\",\"text/html\");\r\n            links.put(\"dashboard\",dashboard);\r\n            Map<String, String> documentation = new HashMap<>();\r\n            documentation.put(\"href\",\"https://docs.liquichain.io/reference/v2/orders-api/get-order\");\r\n            // see \"https://docs.mollie.com/reference/v2/orders-api/get-order\",\r\n            documentation.put(\"type\",\"text/html\");\r\n            links.put(\"documentation\",documentation);\r\n            \r\n            parameters.put(\"_links\",links);\r\n            parameters.put(\"_embed\",new ArrayList<>());\r\n            try {\r\n                result = mapper.writeValueAsString(parameters);\r\n            } catch(Exception ex){\r\n                result = \"\" +parameters;\r\n            }\r\n        } catch (Exception e){\r\n           log.error(\"error persisting  order:{} [{}]\",result,e.getMessage());\r\n           result =\"{\\\"error\\\":\\\"error persisting order\\\"\";\r\n        }\r\n\t}\r\n\t\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}